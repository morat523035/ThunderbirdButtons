// mozilla.cfg file needs to start with a comment line

// mozilla.cfg file is sandboxed by default i.e. can't use Components object
// disable sandbox by setting general.config.sandbox_enabled pref to false in autoconfig.js file

// run userChrome.js example.uc.js example.as.css example.css files in chrome folder
// do not run userChrome.css userContent.css example.js files in chrome folder

// Thunderbird 68 uses .xul   pages
// Thunderbird 78 uses .xhtml pages

// addressbook.xhtml window removed in Thunderbird 102

// Thunderbird 115 uses Components.utils.import("resource://gre/modules/Services.jsm");
// Thunderbird 128 uses var Services = globalThis.Services;

var Services = globalThis.Services;
Services.console.logStringMessage("mozilla.cfg script loaded");
Services.obs.addObserver(function (aSubject, aTopic, aData) {
  var chromeWindow;
  if (aSubject.QueryInterface) {
    chromeWindow = aSubject.QueryInterface(Components.interfaces.nsIDOMWindow); // Thunderbird 68
  } else {
    chromeWindow = aSubject; // Thunderbird 78
  }
  chromeWindow.addEventListener("load", function (aEvent) {
    var doc = aEvent.target;
    var url = doc.location.href;
    if (url == "chrome://messenger/content/messenger.xul" ||
        url == "chrome://messenger/content/messageWindow.xul" ||
        url == "chrome://messenger/content/messengercompose/messengercompose.xul" ||
        url == "chrome://messenger/content/addressbook/addressbook.xul" ||
        url == "chrome://messenger/content/messenger.xhtml" ||
        url == "chrome://messenger/content/messageWindow.xhtml" ||
        url == "chrome://messenger/content/messengercompose/messengercompose.xhtml" ||
        url == "chrome://messenger/content/addressbook/addressbook.xhtml") {
      chromeWindow.setTimeout(function () {
        try {
          if (chromeWindow.userChromeJsMod) return;
          chromeWindow.userChromeJsMod = true;
          var chromeFiles = chromeWindow.FileUtils.getDir("UChrm", []).directoryEntries;
          var sss = Components.classes["@mozilla.org/content/style-sheet-service;1"].
            getService(Components.interfaces.nsIStyleSheetService);
          while (chromeFiles.hasMoreElements()) {
            var file = chromeFiles.getNext().QueryInterface(Components.interfaces.nsIFile);
            var fileURI = Services.io.newFileURI(file);
            if (file.isFile()) {
              if (/(^userChrome|\.uc)\.js$/i.test(file.leafName)) {
                Services.scriptloader.loadSubScriptWithOptions(fileURI.spec, {
                  target: chromeWindow,
                  charset: "UTF-8",
                  ignoreCache: true,
                });
              } else if (/\.as\.css$/i.test(file.leafName)) {
                if (!sss.sheetRegistered(fileURI, sss.AGENT_SHEET)) {
                  sss.loadAndRegisterSheet(fileURI, sss.AGENT_SHEET);
                }
              } else if (/^(?!(userChrome|userContent)\.css$).+\.css$/i.test(file.leafName)) {
                if (!sss.sheetRegistered(fileURI, sss.USER_SHEET)) {
                  sss.loadAndRegisterSheet(fileURI, sss.USER_SHEET);
                }
              }
            }
          }
        } catch (aError) {
          Components.utils.reportError(aError);
        }
      }, 1000);
    }
  }, false);
}, "chrome-document-global-created", false);
